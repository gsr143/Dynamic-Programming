/*
You are given an infinite supply of coins of each of denominations D = {D0, D1, D2, D3, ...... Dn-1}. You need to figure out the total number of ways W, in which you can make change for Value V using coins of denominations D.
Note : Return 0, if change isn't possible.
Input Format
Line 1 : Integer n i.e. total number of denominations
Line 2 : N integers i.e. n denomination values
Line 3 : Value V
Output Format
Line 1 :  Number of ways i.e. W
Constraints :
1<=n<=10
1<=V<=1000
Sample Input 1 :
3
1 2 3
4
Sample Output
4
Sample Output Explanation :
Number of ways are - 4 total i.e. (1,1,1,1), (1,1, 2), (1, 3) and (2, 2).
*/


#include<iostream>
using namespace std;

int countWaysToMakeChange(int denominations[], int numDenominations, int value){

    int out[value+1][numDenominations];
    
      for(int j=0;j<=value;j++)
    {
        for(int k=0;k<=numDenominations;k++)
        {
            out[j][k]=0;   
        }
    }
    
    for(int i=0;i<numDenominations;i++)
    {
        out[0][i]=1;
    }

     for (int i = 1; i < value + 1; i++) 
    { 
        for (int j = 0; j < numDenominations; j++) 
        { 
          
            int x = (i-denominations[j] >= 0) ? out[i - denominations[j]][j] : 0; 
  
            
            int y = (j >= 1) ? out[i][j - 1] : 0; 
  
            
            out[i][j] = x + y; 
        } 
    } 
    return out[value][numDenominations - 1];             
}

int main(){

  int numDenominations;
  cin >> numDenominations;
  int* denominations = new int[numDenominations];
  for(int i = 0; i < numDenominations; i++){
    cin >> denominations[i];
  }
  int value;
  cin >> value;

  cout << countWaysToMakeChange(denominations, numDenominations, value);
}
