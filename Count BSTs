/*
Given an integer N, find and return the count of unique Binary search trees (BSTs) are possible with nodes valued from 1 to N.
Output count can be very large, so return the count modulo 10^9+7.
Input Format :
Integer n 
Output Format :
Count of BSTs
Contraints :
1<= N <=1000
Sample Input 1:
8
Sample Output 1:
1430
Sample Input 2:
3
Sample Output 2:
5
*/

#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstdio>
using namespace std;

int countBST( int n)
{
    int mod=1000000007;
    int * dp=new int [n+1];
    
    dp[0]=1;
    dp[1]=1;
    
    for(int i=2;i<=n;i++)
    {
        dp[i]=0;
        for(int j=0;j<i;j++)
        { 
            long t=(dp[j]*1L*dp[i-j-1])%mod;
             dp[i]=(int)(dp[i] + t)%mod;

        }
    }
    
    int ans=dp[n]%mod;
    delete [] dp;
    return ans;

}

int main()
{
	int n ;
	cin>>n;
	cout<<countBST(n);
	return 0;
}
