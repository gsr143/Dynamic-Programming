/*
Gary has two string S and V. Now Gary wants to know the length shortest subsequence in S such that it is not a subsequence in V.
Note: input data will be such so there will always be a solution.
Input Format :
Line 1 : String S of length N (1 <= N <= 1000)
Line 2 : String V of length M (1 <= M <= 1000)
Output Format :
Length of shortest subsequence in S such that it is not a subsequence in V
Sample Input :
babab
babba
Sample Output :
3
*/


#include<bits/stdc++.h>
using namespace std;

# define MAX 1005
         
int solve(string S,string V)
{
   int m=S.length();
    int n=V.length();
    
    int** dp=new int*[m+1];
    for(int i=0;i<=m;i++)
    {
        dp[i]=new int [n+1];
    }
    
    for(int i=0;i<=n;i++)
    {
        dp[0][i]=MAX;
    }
    for(int j=0;j<=m;j++)
    {
        dp[j][0]=1;
    }
    
    for(int i=1;i<=m;i++)
    {
        for(int j=1;j<=n;j++)
        {
            int k;
            for(k=j-1;k>=0;k--)
            {
                if(V[k]==S[i-1])
                {
                    break;
                }
            }
                
                if(k==-1)
                    dp[i][j]=1;
                else
                {
                    dp[i][j]=min(dp[i-1][j],dp[i-1][k]+1);
                }
            
        }
    }
    int ans=dp[m][n];
    for(int i=0;i<=m;i++)
    {
        delete[] dp[i];
    }
    delete[] dp;
    if(ans>=MAX)
    {
        ans=-1;
    }
    return ans;
    
    
}

int main()
{
	string S,V;
	cin>>S>>V;
	cout<<solve(S,V)<<endl;
	return 0;
}
